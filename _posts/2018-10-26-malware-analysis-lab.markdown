---
layout: post
title:  "Setting up a Malware Analysis Lab with Cuckoo, Moloch and MISP"
date:   2018-10-26 10:00:00 +0200
categories: cuckoo ansible malware
---

* This will become a table of contents (this text will be scraped).
{:toc}

## Intro
This post is about the more or less automated setup of a Malware Analysis Lab using Open Source components. The Lab will consist of the following components:   

- [Cuckoo][cuckoo-link]{:target="_blank"} Sandbox
- [Moloch][moloch-link]{:target="_blank"} Packet Capturing and Indexing System
- [MISP][misp-link] Threat Intelligence Platform  


## Hardware
Running Cuckoo requires a physical server which is capable to run at least one, better more Windows VMs with 4GB RAM each. To keep things simple, Moloch will be installed on the same system. MISP is better deployed to a different server or VM respectively for a better isolation from the malware analysis environment. The bastion host (if needed, see below) should also run on a dedicated VM.   

The following server names are used in this post:  

- eagle: The physical server which runs Cuckoo and Moloch. 
- swift: The virtual server which runs MISP


## Operating systems
I use Ubuntu 18.04 as server OS on all systems. The Ansible playbooks for Cuckoo and Moloch are more or less Ubuntu specific, for MISP and the Bastion server, any Linux is fine.  
For the Sandbox VMs you should choose Windows 7 x64 or a Windows 10 x64.


## Ansible Basics
Ansible is an IT automation engine that automates configuration management, application deployment and many other tasks. Ansible is used in this blog post to get an automated and repeatable setup of the Malware Analysis Lab. If you are new to Ansible, maybe take a look at these two intros:  

- [https://www.ansible.com/get-started](https://www.ansible.com/get-started){:target="_blank"}
- [https://www.ansible.com/blog/ansible-best-practices-essentials](https://www.ansible.com/blog/ansible-best-practices-essentials){:target="_blank"}


### Bastion host  
If you are planning to setup your environment in a public network like Hetzner, consider using a [bastion host][wiki-bastion]{:target="_blank"}. In this case, this bastion host can also be the one on which Ansible is installed.  

### Requirements
The systems which runs Ansible needs to be able to access all other systems over SSH. The authentication needs to be non-interactive, therefore using a SSH key without password is the straight forward solution.

### Setup  
To get the latest release from the official PPA, install Ansible on an Ubuntu 18.04 as follows:  

{% highlight bash %}
sudo apt update
sudo apt install software-properties-common
sudo apt-add-repository ppa:ansible/ansible
sudo apt install ansible
{% endhighlight %}

I like to have everything in one place at /opt/ansible and have some fact caching for the managed systems. Make the following adjustments in /etc/ansible/ansible.cfg to change this from the default settings:   

	inventory    = /opt/ansible/hosts
	roles_path   = /opt/ansible/roles:/etc/ansible/roles
	fact_caching = jsonfile
	fact_caching_connection = /opt/ansible/cache
	fact_caching_timeout = 86400

If you haven't already setup Ansible and a directory holding the hosts file, roles etc., it's time to do now. See [Best Practices - Directory layout][ansible-dir-layout]{:target="_blank"} for more information regarding the directory structure. To have everything in /opt/ansible, run the following commands:  

{% highlight bash %}
sudo mkdir -p /opt/ansible/cache
sudo chown -R `whoami` /opt/ansible
mkdir /opt/ansible/group_vars
mkdir /opt/ansible/host_vars
mkdir /opt/ansible/roles
touch /opt/ansible/hosts
{% endhighlight %}

Your directory layout in /opt/ansible should look like:

	.
	├── cache/
	├── group_vars/
	├── hosts
	├── host_vars/
	└── roles/


### Configure the hosts
Hosts managed by Ansible can be grouped, whereat these groups can be nested. It is advisable to group the hosts e.g. by the services they host. In our setup, we only have one host per service.  
Open the hosts file located at /opt/ansible (or the location you configured in /etc/ansible/ansible.cfg) and populate it with the following content:  

	[analysis]
	swift

	[sandbox]
	eagle

	[malwarelab:children]
	analysis
	sandbox

	[malwarelab:vars]
	ansible_python_interpreter=/usr/bin/python3

The last setting is needed to force Ansible to use Python 3.

### Gather facts
Test your hosts file by gathering the facts from all systems.

{% highlight bash %}
ansible -m setup all
{% endhighlight %}


## Install MISP
Let's start with the installation of MISP on it's dedicated VM. If you didn't install Docker and docker-compose already, follow the instructions found at [https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/){:target="_blank"} and [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/){:target="_blank"}.  

You can either use the official [Docker MISP Container](https://github.com/misp/docker-misp){:target="_blank"} or my slightly modified fork of it: [https://github.com/drbeni/docker-misp](https://github.com/drbeni/docker-misp){:target="_blank"}. The fork changes the following:  

- Use persistent config files for MISP  
- Use an external SMTP server instead of a local Postfix  
- Allow insecure HTTP connections to the web front end so you can put the container behind a reverse proxy  
- Add a docker-compose file  

The installation instructions below are for my fork of docker-misp.

### Get the source
Clone the repository to `/opt/ansible/roles`:  

	cd /opt/ansible/roles
	git clone https://github.com/drbeni/docker-misp.git

### Do the configuration
cd to the cloned repository and open the file `build.sh`. The variables at the top should be changed:  

	MYSQL_MISP_PASSWORD=ChangeThisDefaultPassword
	MISP_FQDN=misp.your-domain.ch
	MISP_EMAIL=mail@your-domain.ch
	MISP_EMAIL_HOST=ssl://mail.your-domain.ch
	MISP_EMAIL_PORT=465
	MISP_EMAIL_USER=misp@your-domain.ch
	MISP_EMAIL_PASSWORD=thePasswordOfYourMispEmailUser

### Build the container
**Important**: Building the image takes a while, even on beefy machines. Meanwhile, you can start with the Ansible part.  

From within `docker-misp`, build the image with:  

	sudo ./build.sh

### Deploy the persistent files
The build script not only built the image, but also created/changed some config files which are used by the container. When you look at the `docker-compose.yml` file in the root of the docker-misp repository, you see some volume mappings. The left part of these settings is the location on the Docker host, the right part the path inside the container. If you want your files at a different place on your Docker host, change the `docker-compose.yml` and amend the commands used for the deployment.  

Create and deploy the MISP configuration section with:   

	sudo mkdir -p /docker/misp/db
	sudo chown -R `whoami` /docker/misp

	cp -r Config /docker/misp/
	cp -r apache /docker/misp/
	cp -r ssmtp /docker/misp/

	# set the owner to www-data for the files which must be writable by the web server
	sudo chown -R 33:33 /docker/misp/Config

	# make the db folder writable for MySQL inside the container
	chmod -R 777 /docker/misp/db

### Initialize Database
Before starting MISP the first time, the database has to be initialized. If you didn't put the DB files to `/docker/misp/db`, change the path in the command:  

	sudo docker run -it --rm \
    -v /docker/misp/db:/var/lib/mysql \
    harvarditsecurity/misp /init-db

### Optional: Use an existing GPG key
If you want to use an existing GPG key, export it to `/docker/misp/gpg.asc`. To make it available to the container, add the following volume mapping in `docker-compose.yml`:  

	  - "/docker/misp/gpg.asc:/var/www/docker/misp/app/webroot/gpg.asc"

### Start MISP
Update the volume mappings in `docker-compose.yml` if you didn't put the DB and config files to `/misp`.  
Also update the port mappings if required. The left part of the port mapping is the port on the Docker host, the right part the port in the container.  
Then, start MISP with docker-compose:  

	sudo docker-compose up -d 


### Create API user
Go to: https://localhost (or your "MISP_FQDN" setting)

	Login: admin@admin.test
	Password: admin

And change the password!

To create a non admin user which will be used by Cuckoo to submit the analysis results, go to Administration / Add User and create a new user. Give him the Role "User" and note down the Authentication key.

## Install Ansible based dependencies

### Create the playbook
Create the file `sandbox.yml` in `/opt/ansible` and populate it with the following content:  
 
	---
	-
	  hosts: sandbox
	  roles:  
	    -
	      role: ansible-role-postgres
	      tags: role-postgres
	    - 
	      role: ansible-role-moloch
	      tags: role-moloch	      
	    -
	      role: ansible-role-cuckoo
	      tags: role-cuckoo


### Fetch the ansible roles
Although there is Ansible Galaxy, I prefer to get Ansible roles from GitHub if possible.  
Go to your roles folder `/opt/ansible/roles` and clone the following repositories with:  

	cd /opt/ansible/roles
	git clone https://github.com/drbeni/ansible-role-cuckoo.git
	git clone https://github.com/drbeni/ansible-role-postgres.git
	git clone https://github.com/drbeni/ansible-role-moloch.git


### Create configuration for the sandbox group
We will put all configuration to the group vars of sandbox: `/opt/ansible/group_vars/sandbox.yml`. Open this file and populate it with the following content:   

	# Create password with python -c 'import crypt; print crypt.crypt("This is my Password", "$1$SomeSalt$")'
	cuckoo_user: cuckoo
	cuckoo_user_password: $1$SomeSalt$youpasswordhashhere.
	cuckoo_user_home: /home/cuckoo
	cuckoo_virtualenv: /home/cuckoo/venv
	cuckoo_public_keys:
	  - /path/to/your/ssh/public/keys which you will use for SSH login

	cuckoo_server_ip: 192.168.122.1

	db_user: cuckoo
	db_password: your-super-duper-db-password
	db_name: cuckoo

	cuckoo_sandbox_vms:
	  - name: "win7x64_01"
	    ip: "192.168.122.11"
	    platform: windows
	    snapshot: snap0
	    interface: virbr0
	    tags: win7x64
	    osprofile: Win7SP1x64  

	    
	moloch_host: your-moloch-host
	moloch_enable_capture: false
	moloch_interface: virbr0
	moloch_insecure: yes
	moloch_password: your-internal-moloch-password-you-will-never-use
	moloch_admin_password: your-moloch-admin-password

	misp_url: https://your-misp-server
	misp_api_key: your-misp-api-key

**Important settings which you might want to change:**  

| Variable | Description |
| --- | --- |
| `cuckoo_user_password` | The password hash of the cuckoo user. Create it with<br /> `python -c 'import crypt; print crypt.crypt("This is my Password", "$1$SomeSalt$")'` |
| `cucko_public_keys` | Path to the SSH public key(s) which will be used to access eagle with the cuckoo user. Leave the list blank if you prefer to log in by password |
| `cuckoo_server_ip` | Your server's IP as it is visible from a Sandbox VM. Leave it as if for the default value |  
| `cuckoo_sandbox_vms` | If you already have one or more sandbox VMs, update the cuckoo_sandbox_vms settings accordingly. If not, you can leave the default values there and override it later | 
| `moloch_host` | Domain or IP of your server as seen from the outside. If you plan to use a dedicated virtual host for accessing Moloch, put it's domain here |
| `moloch_enable_capture` | Leave it to false if you only want to let cuckoo import it's pcap data. When set to true, all traffic on the `moloch_interface` will be captured |
| `moloch_insecure` | Flag whether Moloch's interface is on HTTP or HTTPS | 
| `moloch_admin_password` | Password of Moloch's admin user |
| `misp_url` | The URL under which your MISP instance can be reached from the sandbox server |
| `misp_api_key` | The MISP API key you noted down when creating the cuckoo user |
  

### Install PostgreSQL
The Ansible role ansible-role-postgres installs PostgreSQL 10 and creates the user `db_user`  with the password `db_password`. This user will have all privileges on the created database `db_name`.  

Run the playbook with: 

{% highlight bash %}
ansible-playbook --tags=role-postgres sandbox.yml
{% endhighlight %}

### Install Moloch
The Ansible role ansible-role-moloch does an all-in-one installation of Moloch on a single server. It uses a slightly modified version of the official installation script which does the setup of ElasticSearch and all other dependencies.

Run the playbook with: 

{% highlight bash %}
ansible-playbook --tags=role-moloch sandbox.yml
{% endhighlight %}

## Cuckoo
All dependencies installed and working? Let's continue with the core of our Malware Analysis Lab: Cuckoo.

### Install Cuckoo
The Ansible role ansible-role-cuckoo does the the installation with one command:

{% highlight bash %}
ansible-playbook --tags=role-cuckoo sandbox.yml
{% endhighlight %}

**Important:** If KVM wasn't installed before running the Ansible role, you have to reboot the sandbox server now.

### Create Sandbox VM(s)
If not already done, create your Sandbox VMs. When they are ready, take a snapshot and add the information to the `cuckoo_sandbox_vms` array in your `/opt/ansible/group_vars/sandbox.yml`.  

To update the Cuckoo configuration, just re-run the ansible-role-cuckoo with 

{% highlight bash %}
ansible-playbook --tags=role-cuckoo sandbox.yml
{% endhighlight %}

Don't forget to restart Cuckoo after each config update!

### Start Cuckoo
Log in to your sandbox server, become cuckoo user and run the supervisord with

{% highlight bash %}
sudo su - cuckoo
source ~/venv/bin/activate
supervisord -c ~/.cuckoo/supervisord.conf
{% endhighlight %}

Cuckoo's web front is now available at http://cuckoo-server:8000, the API at http://cuckoo-server:8001  

Happy malware analyzing!


[cuckoo-link]: https://cuckoosandbox.org/
[misp-link]: https://www.misp-project.org/
[moloch-link]: https://molo.ch/
[wiki-bastion]: https://en.wikipedia.org/wiki/Bastion_host
[ansible-dir-layout]: http://docs.ansible.com/ansible/playbooks_best_practices.html#directory-layout